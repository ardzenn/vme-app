<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Call Plan - VME App</title>
    <%- include('partials/header-meta') %>
    <style>
        .card-body h5 { border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 15px; }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <main class="container my-5" style="max-width: 800px;">
        <header class="page-header">
            <div>
                <h1>Daily Call Plan</h1>
                <p class="text-muted">Outline your objectives and targets for the day.</p>
            </div>
        </header>
        <div id="notification-area"></div>
        <% if (locals.error_msg && error_msg.length > 0) { %><div class="alert alert-danger"><%= error_msg %></div><% } %>

        <form id="dailyPlanForm" enctype="multipart/form-data">
            <div class="card">
                <div class="card-body">
                    <div class="mb-3"><label for="planDate" class="form-label">Plan Date</label><input type="date" id="planDate" name="planDate" class="form-control" value="<%= planDate %>" required <%= plan._id ? 'readonly' : '' %>></div>
                    <div class="mb-3"><label for="firstClientCall" class="form-label">First Client Call</label><input type="text" id="firstClientCall" name="firstClientCall" class="form-control" value="<%= plan.firstClientCall || '' %>"></div>
                    <div class="mb-4"><label for="areasToVisit" class="form-label">Areas to Visit Today</label><input type="text" id="areasToVisit" name="areasToVisit" class="form-control" value="<%= plan.areasToVisit || '' %>"></div>

                    <h5 class="mt-4">1. Hospitals & Capitol to Visit</h5>
                    <div id="itinerary-container"></div>
                    <button type="button" id="add-itinerary-btn" class="btn btn-sm btn-outline-primary">+ Add Place</button>

                    <h5 class="mt-4">2. Sales Objectives for the Day</h5>
                    <div id="sales-objectives-container"></div>
                    <button type="button" id="add-sales-objective-btn" class="btn btn-sm btn-outline-primary">+ Add Objective</button>

                    <h5 class="mt-4">3. Target Collections (90 Days and Below)</h5>
                    <div id="current-collections-container"></div>
                    <button type="button" id="add-current-collection-btn" class="btn btn-sm btn-outline-primary">+ Add Target</button>

                    <h5 class="mt-4">4. Target Collections (Overdue)</h5>
                    <div id="overdue-collections-container"></div>
                    <button type="button" id="add-overdue-collection-btn" class="btn btn-sm btn-outline-primary">+ Add Overdue Target</button>
                    
                    <h5 class="mt-4">Odometer Reading</h5>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Starting Odometer (Km)</label>
                            <input type="number" name="startingOdometer" class="form-control" value="<%= plan.startingOdometer || '' %>">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Upload an image</label>
                            <input type="file" name="startingOdometerPhoto" class="form-control" accept="image/*">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Note</label>
                            <textarea name="startingOdometerNote" class="form-control" rows="2"><%= plan.startingOdometerNote || '' %></textarea>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-end">
                    <a href="/planning/my-plans" class="btn btn-secondary">Cancel</a>
                    <button type="submit" class="btn btn-success" id="submitBtn"><%= plan._id ? 'Update Plan' : 'Submit Plan' %></button>
                </div>
            </div>
        </form>
    </main>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const planData = <%- JSON.stringify(plan || {}) %>;
            const isEditMode = !!planData._id;

            const itineraryContainer = document.getElementById('itinerary-container');
            const salesObjectivesContainer = document.getElementById('sales-objectives-container');
            const currentCollectionsContainer = document.getElementById('current-collections-container');
            const overdueCollectionsContainer = document.getElementById('overdue-collections-container');

            function addItineraryItem(value = '') {
                const index = itineraryContainer.children.length;
                const div = document.createElement('div');
                div.className = 'input-group mb-2';
                div.innerHTML = `<span class="input-group-text">${index + 1}.</span><input type="text" class="form-control" placeholder="Place Name" value="${value}"><button class="btn btn-outline-danger" type="button" onclick="this.parentElement.remove()">X</button>`;
                itineraryContainer.appendChild(div);
            }

            function addSalesObjective(value = { objective: '' }) {
                const div = document.createElement('div');
                div.className = 'input-group mb-2';
                div.innerHTML = `<input type="text" class="form-control" placeholder="Objective description" value="${value.objective}"><button class="btn btn-outline-danger" type="button" onclick="this.parentElement.remove()">X</button>`;
                salesObjectivesContainer.appendChild(div);
            }

            function addCurrentCollection(value = { client: '', amount: '' }) {
                const div = document.createElement('div');
                div.className = 'input-group mb-2';
                div.innerHTML = `<input type="text" class="form-control" placeholder="Client Name" value="${value.client || ''}"><span class="input-group-text">â‚±</span><input type="number" class="form-control" placeholder="Amount" step="0.01" value="${value.amount || ''}"><button class="btn btn-outline-danger" type="button" onclick="this.parentElement.remove()">X</button>`;
                currentCollectionsContainer.appendChild(div);
            }

            function addOverdueCollection(value = { client: '', siDrNumber: '', date: '', amount: '' }) {
                const index = overdueCollectionsContainer.children.length;
                const div = document.createElement('div');
                const dateValue = value.date ? new Date(value.date).toISOString().split('T')[0] : '';
                div.className = 'card bg-light p-3 mb-2';
                div.innerHTML = `<div class="d-flex justify-content-between align-items-center mb-2"><h6>Overdue Target ${index + 1}</h6><button class="btn btn-sm btn-danger" type="button" onclick="this.closest('.card').remove()">Remove</button></div><input type="text" class="form-control mb-2" placeholder="Client Name" value="${value.client || ''}"><input type="text" class="form-control mb-2" placeholder="SI / DR Number" value="${value.siDrNumber || ''}"><input type="date" class="form-control mb-2" value="${dateValue}"><input type="number" class="form-control" placeholder="Amount" step="0.01" value="${value.amount || ''}">`;
                overdueCollectionsContainer.appendChild(div);
            }

            if (isEditMode) {
                if (planData.itinerary) planData.itinerary.forEach(item => addItineraryItem(item));
                if (planData.salesObjectives) planData.salesObjectives.forEach(item => addSalesObjective(item));
                if (planData.targetCollections) {
                    if (planData.targetCollections.current) planData.targetCollections.current.forEach(item => addCurrentCollection(item));
                    if (planData.targetCollections.overdue) planData.targetCollections.overdue.forEach(item => addOverdueCollection(item));
                }
            }
            
            document.getElementById('add-itinerary-btn').addEventListener('click', () => addItineraryItem());
            document.getElementById('add-sales-objective-btn').addEventListener('click', () => addSalesObjective());
            document.getElementById('add-current-collection-btn').addEventListener('click', () => addCurrentCollection());
            document.getElementById('add-overdue-collection-btn').addEventListener('click', () => addOverdueCollection());

            document.getElementById('dailyPlanForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const actionUrl = isEditMode ? `/planning/daily/${planData._id}` : '/planning/daily';
                const submitBtn = document.getElementById('submitBtn');
                const notificationArea = document.getElementById('notification-area');
                submitBtn.disabled = true;
                submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Submitting...`;
                notificationArea.innerHTML = '';

                try {
                    const formData = new FormData(e.target);
                    
                    const itinerary = Array.from(document.querySelectorAll('#itinerary-container input')).map(input => input.value).filter(val => val.trim() !== '');
                    const salesObjectives = Array.from(document.querySelectorAll('#sales-objectives-container input')).map(input => ({ objective: input.value })).filter(val => val.objective.trim() !== '');
                    const targetCollections = {
                        current: Array.from(document.querySelectorAll('#current-collections-container .input-group')).map(item => ({ client: item.children[0].value, amount: item.children[2].value })).filter(val => val.client.trim() !== ''),
                        overdue: Array.from(document.querySelectorAll('#overdue-collections-container .card')).map(item => ({ client: item.children[1].value, siDrNumber: item.children[2].value, date: item.children[3].value, amount: item.children[4].value })).filter(val => val.client.trim() !== '')
                    };

                    formData.append('itinerary', JSON.stringify(itinerary));
                    formData.append('salesObjectives', JSON.stringify(salesObjectives));
                    formData.append('targetCollections', JSON.stringify(targetCollections));
                    
                    const response = await fetch(actionUrl, {
                        method: 'POST',
                        body: formData
                    });
                    
                    const result = await response.json();
                    if (!response.ok) {
                        throw new Error(result.message || 'An unknown server error occurred.');
                    }
                    
                    window.location.href = result.redirectUrl || '/planning/my-plans';

                } catch (error) {
                    notificationArea.innerHTML = `<div class="alert alert-danger">${error.message}</div>`;
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = isEditMode ? 'Update Plan' : 'Submit Plan';
                }
            });
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Company Feed - VME App</title>
    <%- include('partials/header-meta') %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/emojionearea@3.4.2/dist/emojionearea.min.css"/>
    <link href="https://unpkg.com/cloudinary-video-player@1.9.0/dist/cld-video-player.min.css" rel="stylesheet">
    <style>
        .post-card { margin-bottom: 1.5rem; }
        .post-author-img { width: 45px; height: 45px; object-fit: cover; }
        .post-img { max-height: 400px; object-fit: cover; cursor: pointer; }
        .comment { background-color: #f8f9fa; border-radius: 15px; }
        .post-actions { position: absolute; top: 1rem; right: 1rem; }
        .reactions-container { position: relative; }
        .reactions-palette {
            visibility: hidden; opacity: 0;
            position: absolute;
            bottom: 100%; left: 0;
            background: white;
            border-radius: 20px;
            padding: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            margin-bottom: 5px;
            white-space: nowrap;
            transition: opacity 0.2s, visibility 0.2s;
        }
        .reactions-container:hover .reactions-palette { visibility: visible; opacity: 1; }
        .reaction-icon { font-size: 1.5rem; margin: 0 5px; cursor: pointer; transition: transform 0.2s; }
        .reaction-icon:hover { transform: scale(1.3); }
        .reaction-summary { display: flex; gap: 0.5rem; align-items: center; }
        .reaction-summary span { font-size: 0.8rem; color: #6c757d; }
        .react-btn { font-weight: bold; }
        .react-btn.liked-like { color: #0d6efd; }
        .react-btn.liked-heart { color: #dc3545; }
        .react-btn.liked-laugh, .react-btn.liked-wow, .react-btn.liked-sad { color: #ffc107; }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    <main class="container my-5" style="max-width: 700px;">
        <header class="page-header">
            <h1>Company Feed</h1>
            <p class="text-muted">See updates from everyone in the company.</p>
        </header>

        <% if (locals.success_msg && success_msg.length > 0) { %><div class="alert alert-success"><%= success_msg %></div><% } %>
        <% if (locals.error_msg && error_msg.length > 0) { %><div class="alert alert-danger"><%= error_msg %></div><% } %>

        <div class="card post-card">
            <div class="card-body">
                <form action="/feed/posts" method="POST" enctype="multipart/form-data">
                    <div class="mb-3">
                        <textarea name="content" class="form-control" rows="3" placeholder="What's on your mind, <%= currentUser.firstName %>?" required></textarea>
                    </div>
                    <img id="post-image-preview" src="#" alt="Image Preview" class="img-fluid rounded mb-3" style="display:none; max-height: 200px;"/>
                    <video id="post-video-preview" class="img-fluid rounded mb-3" style="display:none; max-height: 200px;" controls></video>
                    <div class="d-flex justify-content-between align-items-center">
                        <input type="file" name="postMedia" id="postMediaInput" class="form-control form-control-sm w-50" accept="image/*,video/*">
                        <button type="submit" class="btn btn-primary">Post Update</button>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="mb-4">
             <input type="text" id="feed-search-input" class="form-control" placeholder="Search posts by author or content...">
        </div>

        <div id="feed-container">
            <% posts.forEach(post => { %>
                <%
                    const reactions = post.reactions || []; // FIXED: Provide a fallback empty array
                    const reactionCounts = reactions.reduce((acc, r) => { acc[r.type] = (acc[r.type] || 0) + 1; return acc; }, {});
                    const currentUserReaction = reactions.find(r => r.user && r.user._id.toString() === currentUser.id.toString());
                    const reactionEmojis = { like: 'üëç', heart: '‚ù§Ô∏è', laugh: 'üòÇ', wow: 'üòÆ', sad: 'üò¢' };
                %>
                <div class="card post-card" id="post-<%= post._id %>" data-search-term="<%= post.author.firstName.toLowerCase() %> <%= post.author.lastName.toLowerCase() %> <%= post.content.toLowerCase() %>">
                    <div class="card-body position-relative">
                        <div class="d-flex align-items-center mb-3">
                            <img src="<%= post.author.profilePicture %>" alt="<%= post.author.firstName %>" class="rounded-circle post-author-img me-3">
                            <div>
                                <strong><%= post.author.firstName %> <%= post.author.lastName %></strong>
                                <div class="text-muted small"><%= new Date(post.createdAt).toLocaleString('en-US', { timeZone: 'Asia/Manila' }) %></div>
                            </div>
                        </div>
                        <% if (currentUser.role === 'Admin' || currentUser.role === 'IT') { %>
                            <div class="post-actions">
                                <form action="/feed/posts/<%= post._id %>/delete" method="POST" onsubmit="return confirm('Are you sure you want to permanently delete this post?');">
                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete Post"><i class="fas fa-trash"></i></button>
                                </form>
                            </div>
                        <% } %>
                        <p class="card-text" style="white-space: pre-wrap;"><%= post.content %></p>
                    </div>
                    
                    <% if(post.mediaUrl) { %>
                        <% if (post.mediaType === 'image') { %>
                            <img src="<%= post.mediaUrl %>" class="card-img-bottom post-img" alt="Post image" data-bs-toggle="modal" data-bs-target="#image-viewer-modal" data-img-src="<%= post.mediaUrl %>">
                        <% } else if (post.mediaType === 'video' && post.mediaPublicId) { %>
                            <video id="video-player-<%= post._id %>" class="cld-video-player cld-fluid" preload="auto" controls></video>
                        <% } %>
                    <% } %>
                    
                    <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                        <div class="reactions-container" data-post-id="<%= post._id %>">
                            <div class="reactions-palette">
                                <span class="reaction-icon" data-type="like">üëç</span>
                                <span class="reaction-icon" data-type="heart">‚ù§Ô∏è</span>
                                <span class="reaction-icon" data-type="laugh">üòÇ</span>
                                <span class="reaction-icon" data-type="wow">üòÆ</span>
                                <span class="reaction-icon" data-type="sad">üò¢</span>
                            </div>
                            <button class="btn btn-link text-decoration-none react-btn <%= currentUserReaction ? 'liked-' + currentUserReaction.type : '' %>">
                                <% if (currentUserReaction) { %>
                                    <%- reactionEmojis[currentUserReaction.type] %> <%= currentUserReaction.type.charAt(0).toUpperCase() + currentUserReaction.type.slice(1) %>
                                <% } else { %>
                                    <i class="fas fa-thumbs-up"></i> React
                                <% } %>
                            </button>
                        </div>
                        <div class="reaction-summary">
                            <% for(const type in reactionCounts) { %>
                                <span><%= reactionEmojis[type] %> <%= reactionCounts[type] %></span>
                            <% } %>
                        </div>
                    </div>
                    <div class="card-footer bg-light">
                        <div class="comments-section" id="comments-<%= post._id %>">
                            <% post.comments.forEach(comment => { %>
                                <div class="d-flex align-items-start mb-2 comment p-2">
                                    <img src="<%= comment.author.profilePicture %>" alt="<%= comment.author.firstName %>" class="rounded-circle me-2" width="30" height="30">
                                    <div class="flex-grow-1">
                                        <strong><%= comment.author.firstName %> <%= comment.author.lastName %></strong>
                                        <p class="mb-0 small"><%= comment.content %></p>
                                        <small class="text-muted"><%= new Date(comment.createdAt).toLocaleString('en-US', { timeZone: 'Asia/Manila' }) %></small>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                        <form class="comment-form mt-2">
                            <div class="input-group">
                                <input type="text" name="content" class="form-control comment-input" placeholder="Write a comment..." required>
                                <button class="btn btn-secondary" type="submit" data-post-id="<%= post._id %>">Post</button>
                            </div>
                        </form>
                    </div>
                </div>
            <% }) %>
        </div>
    </main>

    <div class="modal fade" id="image-viewer-modal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered modal-lg"><div class="modal-content"><div class="modal-body p-0">
        <img id="modal-image" src="" class="img-fluid w-100">
      </div></div></div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/emojionearea@3.4.2/dist/emojionearea.min.js"></script>
    <script src="https://unpkg.com/cloudinary-video-player@1.9.0/dist/cld-video-player.min.js" type="text/javascript"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const imageViewerModal = document.getElementById('image-viewer-modal');
            imageViewerModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const imageUrl = button.getAttribute('data-img-src');
                document.getElementById('modal-image').src = imageUrl;
            });

            const postMediaInput = document.getElementById('postMediaInput');
            const imagePreview = document.getElementById('post-image-preview');
            const videoPreview = document.getElementById('post-video-preview');
            postMediaInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        if (file.type.startsWith('image')) {
                            videoPreview.style.display = 'none'; videoPreview.src = '';
                            imagePreview.src = e.target.result; imagePreview.style.display = 'block';
                        } else if (file.type.startsWith('video')) {
                            imagePreview.style.display = 'none'; imagePreview.src = '#';
                            videoPreview.src = e.target.result; videoPreview.style.display = 'block';
                        }
                    }
                    reader.readAsDataURL(file);
                }
            });
            
            const cld = cloudinary.Cloudinary.new({ cloud_name: '<%= process.env.CLOUDINARY_CLOUD_NAME %>' });
            const postsData = <%- JSON.stringify(posts) %>;
            postsData.forEach(post => {
                if (post.mediaType === 'video' && post.mediaPublicId) {
                    cld.videoPlayer(`video-player-${post._id}`, { publicId: post.mediaPublicId, fluid: true, controls: true });
                }
            });

            const searchInput = document.getElementById('feed-search-input');
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                document.querySelectorAll('#feed-container .post-card').forEach(post => {
                    post.style.display = (post.dataset.searchTerm || '').includes(searchTerm) ? 'block' : 'none';
                });
            });

            const reactionEmojis = { like: 'üëç', heart: '‚ù§Ô∏è', laugh: 'üòÇ', wow: 'üòÆ', sad: 'üò¢' };
            function updateReactionsUI(postId, reactionData) {
                const postCard = document.getElementById(`post-${postId}`);
                if (!postCard) return;
                const summaryContainer = postCard.querySelector('.reaction-summary');
                const reactBtn = postCard.querySelector('.react-btn');
                
                let summaryHTML = '';
                for (const type in reactionData.reactions) {
                    if (reactionData.reactions[type] > 0) {
                        summaryHTML += `<span>${reactionEmojis[type]} ${reactionData.reactions[type]}</span>`;
                    }
                }
                summaryContainer.innerHTML = summaryHTML;

                reactBtn.className = 'btn btn-link text-decoration-none react-btn';
                if (reactionData.currentUserReaction) {
                    const reactionType = reactionData.currentUserReaction;
                    reactBtn.classList.add(`liked-${reactionType}`);
                    reactBtn.innerHTML = `${reactionEmojis[reactionType]} ${reactionType.charAt(0).toUpperCase() + reactionType.slice(1)}`;
                } else {
                    reactBtn.innerHTML = `<i class="fas fa-thumbs-up"></i> React`;
                }
            }
            
            document.body.addEventListener('click', async (e) => {
                const reactionIcon = e.target.closest('.reaction-icon');
                if (reactionIcon) {
                    e.preventDefault();
                    const reactionType = reactionIcon.dataset.type;
                    const postId = reactionIcon.closest('.reactions-container').dataset.postId;
                    
                    const response = await fetch(`/feed/posts/${postId}/react`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reactionType })
                    });
                    const result = await response.json();
                    if (result.success) {
                        updateReactionsUI(postId, result);
                    }
                }
            });

            document.body.addEventListener('submit', async (e) => {
                if (e.target.matches('.comment-form')) {
                    e.preventDefault();
                    const form = e.target;
                    const emojiArea = $(form).find('.comment-input').data('emojioneArea');
                    const content = emojiArea.getText().trim();
                    const button = form.querySelector('button');
                    const postId = button.dataset.postId;
                    if (content) {
                        const response = await fetch(`/feed/posts/${postId}/comments`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ content })
                        });
                        const result = await response.json();
                        if (result.success) {
                            const newComment = result.comment;
                            const commentList = document.getElementById(`comments-${postId}`);
                            const commentEl = document.createElement('div');
                            commentEl.className = 'd-flex align-items-start mb-2 comment p-2';
                            commentEl.innerHTML = `
                                <img src="${newComment.author.profilePicture}" alt="${newComment.author.firstName}" class="rounded-circle me-2" width="30" height="30">
                                <div class="flex-grow-1">
                                    <strong>${newComment.author.firstName} ${newComment.author.lastName}</strong>
                                    <p class="mb-0 small">${newComment.content}</p>
                                    <small class="text-muted">${new Date(newComment.createdAt).toLocaleString('en-US', { timeZone: 'Asia/Manila' })}</small>
                                </div>`;
                            commentList.appendChild(commentEl);
                            emojiArea.setText('');
                        }
                    }
                }
            });
            
            $('.comment-input').emojioneArea({
                pickerPosition: 'top', tonesStyle: 'bullet',
                events: {
                    keypress: function (editor, event) {
                        if (event.which == 13 && !event.shiftKey) {
                            event.preventDefault();
                            $(this.element).closest('form').submit();
                        }
                    }
                }
            });
        });
    </script>
</body>
</html>
<div class="modal fade" id="checkinModal" tabindex="-1" aria-labelledby="checkinModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="checkinModalLabel">New Check-In</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="checkinForm" enctype="multipart/form-data">
        <div class="modal-body">
          <div id="checkin-notification-area"></div>
          
          <div class="mb-3">
            <label for="hospital-select" class="form-label">Hospital Name</label>
            <div id="hospital-selection-ui">
              <div class="input-group">
                <select name="hospitalName" id="hospital-select" class="form-select" required>
                  <option value="" selected disabled>-- Select a Hospital --</option>
                  <% if (locals.allHospitals) { %>
                    <% allHospitals.forEach(hospital => { %>
                      <option value="<%= hospital.name %>" data-hospital-id="<%= hospital._id %>"><%= hospital.name %></option>
                    <% }) %>
                  <% } %>
                </select>
                <button class="btn btn-outline-secondary" type="button" id="show-add-hospital-btn">+</button>
              </div>
            </div>
            <div id="hospital-creation-ui" style="display: none;">
              <div class="input-group">
                <input type="text" id="new-hospital-name-input" class="form-control" placeholder="Enter new hospital name...">
                <button class="btn btn-success" type="button" id="save-new-hospital-btn">Save</button>
                <button class="btn btn-danger" type="button" id="cancel-add-hospital-btn">X</button>
              </div>
            </div>
          </div>

          <div class="mb-3">
             <label for="doctor-select" class="form-label">Doctor's Name</label>
            <div id="doctor-selection-ui">
                <div class="input-group">
                    <select name="doctorName" id="doctor-select" class="form-select" required disabled>
                        <option value="" selected>-- Select a hospital first --</option>
                    </select>
                    <button class="btn btn-outline-secondary" id="show-add-doctor-btn" type="button" disabled>+</button>
                </div>
            </div>
            <div id="doctor-creation-ui" style="display: none;">
              <div class="input-group">
                    <input type="text" id="new-doctor-name-input" class="form-control" placeholder="Enter new doctor name...">
                    <button class="btn btn-success" type="button" id="save-new-doctor-btn">Save</button>
                    <button class="btn btn-danger" type="button" id="cancel-add-doctor-btn">X</button>
              </div>
            </div>
          </div>

          <div class="mb-3"><label for="activity" class="form-label">Activity</label><textarea name="activity" id="activity" class="form-control" required></textarea></div>
          
          <div class="mb-3">
              <label class="form-label">Proof of Visit</label>
              <div class="p-3 border rounded">
                <button type="button" id="take-selfie-btn" class="btn btn-secondary">Take Selfie</button>
                <span class="mx-2">or</span>
                <label for="proof-upload" class="btn btn-outline-secondary">Upload from Gallery</label>
                <input type="file" name="proof" id="proof-upload" class="form-control-sm" accept="image/*" style="display: none;">
                <input type="file" id="camera-input" name="camera-proof" accept="image/*" capture="user" style="display: none;">
                <img id="photo-preview" class="mt-3" style="display: none; max-width: 100%; border-radius: 8px;">
              </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Signature</label>
            <div style="border: 1px solid #ccc; border-radius: .375rem; width: 100%; height: 200px; touch-action: none;">
              <canvas id="signature-pad" style="width: 100%; height: 100%;"></canvas>
            </div>
            <button type="button" id="clear-signature" class="btn btn-secondary mt-2 btn-sm">Clear</button>
          </div>
          
          <input type="hidden" name="signature" id="signature-data">
          <input type="hidden" name="lat" id="lat">
          <input type="hidden" name="lng" id="lng">
         </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" id="submitCheckinBtn" class="btn btn-primary">Submit Check-In</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/idb@7/build/umd.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    let allDoctors = <%- JSON.stringify(locals.allDoctors || []) %>;
    
    const checkinModalEl = document.getElementById('checkinModal');
    if (!checkinModalEl) return;
    const checkinModal = new bootstrap.Modal(checkinModalEl);

    const hospitalSelectUI = document.getElementById('hospital-selection-ui');
    const hospitalCreateUI = document.getElementById('hospital-creation-ui');
    const showAddHospitalBtn = document.getElementById('show-add-hospital-btn');
    const cancelAddHospitalBtn = document.getElementById('cancel-add-hospital-btn');
    const saveNewHospitalBtn = document.getElementById('save-new-hospital-btn');
    const hospitalSelect = document.getElementById('hospital-select');
    const newHospitalNameInput = document.getElementById('new-hospital-name-input');
    const doctorSelectUI = document.getElementById('doctor-selection-ui');
    const doctorCreateUI = document.getElementById('doctor-creation-ui');
    const showAddDoctorBtn = document.getElementById('show-add-doctor-btn');
    const cancelAddDoctorBtn = document.getElementById('cancel-add-doctor-btn');
    const saveNewDoctorBtn = document.getElementById('save-new-doctor-btn');
    const doctorSelect = document.getElementById('doctor-select');
    const newDoctorNameInput = document.getElementById('new-doctor-name-input');
    const checkinForm = document.getElementById('checkinForm');
    const sigCanvas = document.getElementById('signature-pad');
    const clearSigButton = document.getElementById('clear-signature');
    const sigDataInput = document.getElementById('signature-data');
    let signaturePad;
    const takeSelfieBtn = document.getElementById('take-selfie-btn');
    const cameraInput = document.getElementById('camera-input');
    const proofUploadInput = document.getElementById('proof-upload');
    const photoPreview = document.getElementById('photo-preview');
    const submitCheckinBtn = document.getElementById('submitCheckinBtn');
    const notificationArea = document.getElementById('checkin-notification-area');
    const latInput = document.getElementById('lat');
    const lngInput = document.getElementById('lng');

    const DB_NAME = 'vme-offline-requests';
    const STORE_NAME = 'checkin-requests';

    const openDB = () => {
      return idb.openDB(DB_NAME, 1, {
        upgrade(db) {
          if (!db.objectStoreNames.contains(STORE_NAME)) {
            db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });
          }
        },
      });
    };

    const saveRequestForSync = async (formDataObject) => {
        const db = await openDB();
        await db.add(STORE_NAME, { body: formDataObject });
    };

    const registerBackgroundSync = async () => {
        if ('serviceWorker' in navigator && 'SyncManager' in window) {
            try {
                const registration = await navigator.serviceWorker.ready;
                await registration.sync.register('offline-checkin-sync');
            } catch (err) {
                console.error('Background sync registration failed:', err);
            }
        }
    };
    
    const dataURItoBlob = (dataURI) => {
        const byteString = atob(dataURI.split(',')[1]);
        const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    };

    const toggleHospitalUI = (showCreate) => { hospitalCreateUI.style.display = showCreate ? 'flex' : 'none'; hospitalSelectUI.style.display = showCreate ? 'none' : 'flex'; };
    const toggleDoctorUI = (showCreate) => { doctorCreateUI.style.display = showCreate ? 'flex' : 'none'; doctorSelectUI.style.display = showCreate ? 'none' : 'flex'; };
    
    showAddHospitalBtn.addEventListener('click', () => toggleHospitalUI(true));
    cancelAddHospitalBtn.addEventListener('click', () => toggleHospitalUI(false));
    showAddDoctorBtn.addEventListener('click', () => toggleDoctorUI(true));
    cancelAddDoctorBtn.addEventListener('click', () => toggleDoctorUI(false));
    
    hospitalSelect.addEventListener('change', () => {
        const selectedOption = hospitalSelect.options[hospitalSelect.selectedIndex];
        const selectedHospitalId = selectedOption ? selectedOption.dataset.hospitalId : null;
        doctorSelect.innerHTML = '<option value="" selected disabled>-- Select a Doctor --</option>';
        if (selectedHospitalId) {
            const doctorsInHospital = allDoctors.filter(doc => doc.hospital && doc.hospital._id === selectedHospitalId);
            if (doctorsInHospital.length > 0) { doctorsInHospital.forEach(doc => doctorSelect.appendChild(new Option(doc.name, doc.name))); } else { doctorSelect.innerHTML = '<option value="" disabled selected>-- No doctors found, add one! --</option>'; }
            doctorSelect.disabled = false;
            showAddDoctorBtn.disabled = false;
        } else {
            doctorSelect.disabled = true;
            showAddDoctorBtn.disabled = true;
        }
    });
    
    saveNewHospitalBtn.addEventListener('click', async () => {
        const name = newHospitalNameInput.value.trim();
        if (!name) return;
        try {
            const res = await fetch('/api/hospitals/add', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ name }) });
            const result = await res.json();
            if (result.success) {
                const newOption = new Option(result.hospital.name, result.hospital.name, true, true);
                newOption.dataset.hospitalId = result.hospital._id;
                hospitalSelect.appendChild(newOption);
                hospitalSelect.dispatchEvent(new Event('change'));
                newHospitalNameInput.value = '';
                toggleHospitalUI(false);
            } else { alert(result.message); }
        } catch (err) { alert('An error occurred.'); }
    });
    
    saveNewDoctorBtn.addEventListener('click', async () => {
        const name = newDoctorNameInput.value.trim();
        const hospitalId = hospitalSelect.options[hospitalSelect.selectedIndex].dataset.hospitalId;
        if (!name || !hospitalId) return;
        try {
            const res = await fetch('/api/doctors/add', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ name, hospitalId }) });
            const result = await res.json();
            if (result.success) {
                allDoctors.push(result.doctor);
                hospitalSelect.dispatchEvent(new Event('change'));
                setTimeout(() => { doctorSelect.value = result.doctor.name; }, 0);
                newDoctorNameInput.value = '';
                toggleDoctorUI(false);
            } else { alert(result.message); }
        } catch (err) { alert('An error occurred.'); }
    });

    const resizeCanvas = () => { if (!sigCanvas.offsetParent) return; const ratio = Math.max(window.devicePixelRatio || 1, 1); sigCanvas.width = sigCanvas.offsetWidth * ratio; sigCanvas.height = sigCanvas.offsetHeight * ratio; sigCanvas.getContext("2d").scale(ratio, ratio); if (signaturePad) { signaturePad.clear(); } };
    checkinModalEl.addEventListener('shown.bs.modal', () => { if (!signaturePad) { signaturePad = new SignaturePad(sigCanvas); } else { signaturePad.clear(); } resizeCanvas(); });
    window.addEventListener("resize", resizeCanvas);
    clearSigButton.addEventListener('click', () => { if(signaturePad) signaturePad.clear(); });
    
    takeSelfieBtn.addEventListener('click', () => {
        cameraInput.click();
    });

    const handleFileSelect = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                photoPreview.src = e.target.result;
                photoPreview.style.display = 'block';
            };
            reader.readAsDataURL(file);

            if (event.target === cameraInput) {
                proofUploadInput.value = ''; 
            } else {
                cameraInput.value = '';
            }
        }
    };
    
    cameraInput.addEventListener('change', handleFileSelect);
    proofUploadInput.addEventListener('change', handleFileSelect);
    
    checkinForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitCheckinBtn.disabled = true;
        submitCheckinBtn.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Submitting...`;
        notificationArea.innerHTML = '';

        if (window.VME_APP_CURRENT_POSITION) {
            latInput.value = window.VME_APP_CURRENT_POSITION.coords.latitude;
            lngInput.value = window.VME_APP_CURRENT_POSITION.coords.longitude;
        } else {
            latInput.value = '';
            lngInput.value = '';
        }

        if (signaturePad && !signaturePad.isEmpty()) {
            sigDataInput.value = signaturePad.toDataURL('image/png');
        }
        
        const formData = new FormData(checkinForm);
        const cameraFile = cameraInput.files[0];
        if (cameraFile) {
            formData.set('proof', cameraFile, cameraFile.name);
        }
        formData.delete('camera-proof');

        const formDataObject = Object.fromEntries(formData.entries());
        
        if (!navigator.onLine) {
            try {
                if (formDataObject.proof instanceof File) {
                    // Convert file to Blob for offline storage
                    formDataObject.proof = new Blob([await formDataObject.proof.arrayBuffer()], { type: formDataObject.proof.type });
                }
                await saveRequestForSync(formDataObject);
                await registerBackgroundSync();
                notificationArea.innerHTML = `<div class="alert alert-info">You are offline. Your check-in has been saved and will be uploaded automatically when you reconnect.</div>`;
                setTimeout(() => checkinModal.hide(), 3000);
            } catch (err) {
                notificationArea.innerHTML = `<div class="alert alert-danger">Could not save check-in for offline sync. Please try again.</div>`;
                submitCheckinBtn.disabled = false;
                submitCheckinBtn.innerHTML = 'Submit Check-In';
            }
        } else {
            try {
                const response = await fetch('/checkin', { method: 'POST', body: formData });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'An error occurred.');

                if (!latInput.value) {
                    navigator.geolocation.getCurrentPosition((pos) => {
                        fetch(`/checkin/location/${result.checkIn._id}`, {
                            method: 'PATCH',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ lat: pos.coords.latitude, lng: pos.coords.longitude })
                        });
                    });
                }
                
                checkinModal.hide();
            } catch (error) {
                notificationArea.innerHTML = `<div class="alert alert-danger">${error.message}</div>`;
                submitCheckinBtn.disabled = false;
                submitCheckinBtn.innerHTML = 'Submit Check-In';
            }
        }
    });

    checkinModalEl.addEventListener('hide.bs.modal', () => {
        checkinForm.reset();
        notificationArea.innerHTML = '';
        submitCheckinBtn.disabled = false;
        submitCheckinBtn.innerHTML = 'Submit Check-In';
        photoPreview.style.display = 'none';
        photoPreview.src = '';
        if (signaturePad) { signaturePad.clear(); }
    });
});
</script>
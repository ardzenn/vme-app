<div class="modal fade" id="checkinModal" tabindex="-1" aria-labelledby="checkinModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="checkinModalLabel">New Check-In</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="checkinForm" action="/checkin" method="POST" enctype="multipart/form-data">
        <div class="modal-body">
          
          <div class="mb-3">
             <label for="hospital-select" class="form-label">Hospital Name</label>
            <div id="hospital-selection-ui">
              <div class="input-group">
                <select name="hospitalName" id="hospital-select" class="form-select" required>
                  <option value="" selected disabled>-- Select a Hospital --</option>
                  <% if (locals.allHospitals) { %>
                    <% allHospitals.forEach(hospital => { %>
                      <option value="<%= hospital.name %>" data-hospital-id="<%= hospital._id %>"><%= hospital.name %></option>
                    <% }) %>
                  <% } %>
                 </select>
                <button class="btn btn-outline-secondary" type="button" id="show-add-hospital-btn">+</button>
              </div>
            </div>
            <div id="hospital-creation-ui" style="display: none;">
              <div class="input-group">
                 <input type="text" id="new-hospital-name-input" class="form-control" placeholder="Enter new hospital name...">
                <button class="btn btn-success" type="button" id="save-new-hospital-btn">Save</button>
                <button class="btn btn-danger" type="button" id="cancel-add-hospital-btn">X</button>
              </div>
            </div>
          </div>

          <div class="mb-3">
             <label for="doctor-select" class="form-label">Doctor's Name</label>
            <div id="doctor-selection-ui">
                <div class="input-group">
                    <select name="doctorName" id="doctor-select" class="form-select" required disabled>
                        <option value="" selected>-- Select a hospital first --</option>
                    </select>
                    <button class="btn btn-outline-secondary" id="show-add-doctor-btn" type="button" disabled>+</button>
                </div>
            </div>
            <div id="doctor-creation-ui" style="display: none;">
                 <div class="input-group">
                    <input type="text" id="new-doctor-name-input" class="form-control" placeholder="Enter new doctor name...">
                    <button class="btn btn-success" type="button" id="save-new-doctor-btn">Save</button>
                    <button class="btn btn-danger" type="button" id="cancel-add-doctor-btn">X</button>
                </div>
            </div>
          </div>

          <div class="mb-3"><label for="activity" class="form-label">Activity</label><textarea name="activity" id="activity" class="form-control" required></textarea></div>
          
          <div class="mb-3">
              <label class="form-label">Proof of Visit</label>
              <div class="p-3 border rounded">
                <button type="button" id="start-camera-btn" class="btn btn-secondary">Take Selfie</button>
                <span class="mx-2">or</span>
                <input type="file" name="proof" id="proof-upload" class="form-control-sm" accept="image/*">
                <div id="camera-container" class="mt-3" style="display: none;">
                  <video id="video-preview" style="width: 100%; border-radius: 8px;" autoplay playsinline></video>
                  <button type="button" id="capture-btn" class="btn btn-danger mt-2">Capture Photo</button>
                </div>
                <canvas id="photo-canvas" style="display: none;"></canvas>
                <img id="photo-preview" class="mt-3" style="display: none; max-width: 100%; border-radius: 8px;">
              </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Signature</label>
            <div style="border: 1px solid #ccc; border-radius: .375rem; width: 100%; height: 200px; touch-action: none;">
              <canvas id="signature-pad" style="width: 100%; height: 100%;"></canvas>
            </div>
            <button type="button" id="clear-signature" class="btn btn-secondary mt-2 btn-sm">Clear</button>
          </div>
          
          <input type="hidden" name="signature" id="signature-data">
          <input type="hidden" name="proof_base64" id="proof-base64-data">
          <input type="hidden" name="lat" id="lat">
          <input type="hidden" name="lng" id="lng">
         </div>
        <div class="modal-footer">
          <div class="me-auto">
            <small id="location-status" class="form-text text-muted">Fetching location...</small>
          </div>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" id="submitCheckinBtn" class="btn btn-primary" disabled>Submit Check-In</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    let allDoctors = <%- JSON.stringify(locals.allDoctors || []) %>;
    
    const checkinModalEl = document.getElementById('checkinModal');
    if (!checkinModalEl) return;

    const hospitalSelectUI = document.getElementById('hospital-selection-ui');
    const hospitalCreateUI = document.getElementById('hospital-creation-ui');
    const showAddHospitalBtn = document.getElementById('show-add-hospital-btn');
    const cancelAddHospitalBtn = document.getElementById('cancel-add-hospital-btn');
    const saveNewHospitalBtn = document.getElementById('save-new-hospital-btn');
    const hospitalSelect = document.getElementById('hospital-select');
    const newHospitalNameInput = document.getElementById('new-hospital-name-input');
    
    const doctorSelectUI = document.getElementById('doctor-selection-ui');
    const doctorCreateUI = document.getElementById('doctor-creation-ui');
    const showAddDoctorBtn = document.getElementById('show-add-doctor-btn');
    const cancelAddDoctorBtn = document.getElementById('cancel-add-doctor-btn');
    const saveNewDoctorBtn = document.getElementById('save-new-doctor-btn');
    const doctorSelect = document.getElementById('doctor-select');
    const newDoctorNameInput = document.getElementById('new-doctor-name-input');
    const checkinForm = document.getElementById('checkinForm');
    
    const sigCanvas = document.getElementById('signature-pad');
    const clearSigButton = document.getElementById('clear-signature');
    const sigDataInput = document.getElementById('signature-data');
    let signaturePad;
    
    const startCameraButton = document.getElementById('start-camera-btn');
    const cameraContainer = document.getElementById('camera-container');
    const videoPreview = document.getElementById('video-preview');
    const captureButton = document.getElementById('capture-btn');
    const photoCanvas = document.getElementById('photo-canvas');
    const photoPreview = document.getElementById('photo-preview');
    const proofBase64Input = document.getElementById('proof-base64-data');
    const proofUploadInput = document.getElementById('proof-upload');
    let stream;
    
    const submitCheckinBtn = document.getElementById('submitCheckinBtn');
    const locationStatus = document.getElementById('location-status');

    const toggleHospitalUI = (showCreate) => {
        hospitalCreateUI.style.display = showCreate ? 'block' : 'none';
        hospitalSelectUI.style.display = showCreate ? 'none' : 'block';
    };
    const toggleDoctorUI = (showCreate) => {
        doctorCreateUI.style.display = showCreate ? 'block' : 'none';
        doctorSelectUI.style.display = showCreate ? 'none' : 'block';
    };

    showAddHospitalBtn.addEventListener('click', () => toggleHospitalUI(true));
    cancelAddHospitalBtn.addEventListener('click', () => toggleHospitalUI(false));
    showAddDoctorBtn.addEventListener('click', () => toggleDoctorUI(true));
    cancelAddDoctorBtn.addEventListener('click', () => toggleDoctorUI(false));

    hospitalSelect.addEventListener('change', () => {
        const selectedOption = hospitalSelect.options[hospitalSelect.selectedIndex];
        const selectedHospitalId = selectedOption ? selectedOption.dataset.hospitalId : null;
        
        doctorSelect.innerHTML = '<option value="" selected disabled>-- Select a Doctor --</option>';
        if (selectedHospitalId) {
            const doctorsInHospital = allDoctors.filter(doc => doc.hospital === selectedHospitalId);
            if (doctorsInHospital.length > 0) {
                doctorsInHospital.forEach(doc => doctorSelect.appendChild(new Option(doc.name, doc.name)));
            } else {
                doctorSelect.innerHTML = '<option value="" selected>-- No doctors found, add one! --</option>';
            }
            doctorSelect.disabled = false;
            showAddDoctorBtn.disabled = false;
        } else {
            doctorSelect.disabled = true;
            showAddDoctorBtn.disabled = true;
        }
    });

    saveNewHospitalBtn.addEventListener('click', async () => {
        const name = newHospitalNameInput.value.trim();
        if (!name) return alert('Hospital name cannot be empty.');
        try {
            const response = await fetch('/api/hospitals/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify({ name })
            });
            const result = await response.json();
            if (result.success) {
                const newOption = new Option(result.hospital.name, result.hospital.name, true, true);
                newOption.dataset.hospitalId = result.hospital._id;
                hospitalSelect.appendChild(newOption);
                hospitalSelect.dispatchEvent(new Event('change'));
                newHospitalNameInput.value = '';
                toggleHospitalUI(false);
            } else { alert(result.message || 'An error occurred.'); }
        } catch (err) { alert('An error occurred. Please try again.'); }
    });

    saveNewDoctorBtn.addEventListener('click', async () => {
        const name = newDoctorNameInput.value.trim();
        const selectedHospitalId = hospitalSelect.options[hospitalSelect.selectedIndex].dataset.hospitalId;
        if (!name) return alert('Doctor name cannot be empty.');
        if (!selectedHospitalId) return alert('A hospital must be selected.');
        try {
            const response = await fetch('/api/doctors/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify({ name, hospitalId: selectedHospitalId })
            });
            const result = await response.json();
            if (result.success) {
                allDoctors.push(result.doctor);
                hospitalSelect.dispatchEvent(new Event('change'));
                setTimeout(() => { doctorSelect.value = result.doctor.name; }, 0);
                newDoctorNameInput.value = '';
                toggleDoctorUI(false);
            } else { alert(result.message || 'An error occurred.'); }
        } catch (err) { alert('An error occurred. Please try again.'); }
    });
    
    const resizeCanvas = () => {
        const ratio = Math.max(window.devicePixelRatio || 1, 1);
        sigCanvas.width = sigCanvas.offsetWidth * ratio;
        sigCanvas.height = sigCanvas.offsetHeight * ratio;
        sigCanvas.getContext("2d").scale(ratio, ratio);
        if (signaturePad) {
            signaturePad.clear();
        }
    };
    
    checkinModalEl.addEventListener('shown.bs.modal', () => {
        if (!signaturePad) {
            signaturePad = new SignaturePad(sigCanvas);
        } else {
            signaturePad.clear();
        }
        resizeCanvas();

        submitCheckinBtn.disabled = true;
        locationStatus.textContent = 'Close the Checkin and refresh again. Please allow permission.';
        locationStatus.classList.remove('text-success', 'text-danger');
        locationStatus.classList.add('text-muted');

        navigator.geolocation.getCurrentPosition(
            (pos) => {
                document.getElementById('lat').value = pos.coords.latitude;
                document.getElementById('lng').value = pos.coords.longitude;
                submitCheckinBtn.disabled = false;
                locationStatus.textContent = "Have a great Day!";
                locationStatus.classList.remove('text-muted', 'text-danger');
                locationStatus.classList.add('text-success');
            },
            (error) => {
                console.error(`Geolocation error: ${error.message}`);
                submitCheckinBtn.disabled = true;
                locationStatus.textContent = 'Please close or refresh this page to and allow all the permision to proceed.';
                locationStatus.classList.remove('text-success', 'text-muted');
                locationStatus.classList.add('text-danger');
            },
            { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
        );
    });

    window.addEventListener("resize", resizeCanvas);
    clearSigButton.addEventListener('click', () => { if(signaturePad) signaturePad.clear(); });

    startCameraButton.addEventListener('click', async () => {
        cameraContainer.style.display = 'block';
        photoPreview.style.display = 'none';
        proofBase64Input.value = '';
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' } });
            videoPreview.srcObject = stream;
        } catch (err) {
            alert("Could not access the camera. Please check permissions.");
        }
    });
    
    captureButton.addEventListener('click', () => {
        photoCanvas.width = videoPreview.videoWidth;
        photoCanvas.height = videoPreview.videoHeight;
        photoCanvas.getContext('2d').drawImage(videoPreview, 0, 0);
        const dataUrl = photoCanvas.toDataURL('image/jpeg');
        photoPreview.src = dataUrl;
        photoPreview.style.display = 'block';
        proofBase64Input.value = dataUrl;
        if(stream) { stream.getTracks().forEach(track => track.stop()); }
        cameraContainer.style.display = 'none';
        proofUploadInput.value = ''; 
    });
    
    checkinForm.addEventListener('submit', (event) => {
        if (signaturePad && !signaturePad.isEmpty()) {
            sigDataInput.value = signaturePad.toDataURL('image/png');
        }

        setTimeout(() => {
            alert("Check-in submitted successfully!");
        }, 100);
    });
});
</script>
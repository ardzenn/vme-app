<!DOCTYPE html>
<html lang="en">
<head>
    <title>Chat - VME App</title>
    <%- include('partials/header-meta') %>
    <style>
        .chat-page-container { display: flex; height: calc(100vh - 70px); }
        .conversation-list { width: 350px; border-right: 1px solid var(--border-color); display: flex; flex-direction: column; }
        .conversation-list-header { padding: 1rem; border-bottom: 1px solid var(--border-color); }
        .conversation-list-body { overflow-y: auto; flex-grow: 1; }
        .conversation { display: flex; align-items: center; gap: 1rem; padding: 1rem; cursor: pointer; }
        .conversation:hover { background-color: var(--background-light); }
        .conversation.active { background-color: var(--primary-blue); color: white; }
        .conversation.active p { color: rgba(255,255,255,0.8); }
        .conversation img { width: 50px; height: 50px; border-radius: 50%; object-fit: cover; }
        .chat-window { flex-grow: 1; display: flex; flex-direction: column; }
        .chat-window-header { display: flex; align-items: center; gap: 1rem; padding: 1rem; border-bottom: 1px solid var(--border-color); }
        #recipient-pic { width: 40px; height: 40px; border-radius: 50%; object-fit: cover; }
    </style>
</head>
<body data-user-id="<%= currentUser._id %>">
    <%- include('partials/navbar') %>

    <div class="chat-page-container">
        <div class="conversation-list">
            <div class="conversation-list-header"><h4>Conversations</h4></div>
            <div class="conversation-list-body">
                <% conversations.forEach(convo => { %>
                    <div class="conversation" data-recipient-id="<%= convo._id %>" data-recipient-name="<%= convo.firstName %> <%= convo.lastName %>" data-recipient-pic="<%= convo.profilePicture %>">
                        <img src="<%= convo.profilePicture %>" alt="<%= convo.firstName %>">
                        <div>
                            <strong><%= convo.firstName %> <%= convo.lastName %></strong>
                            <p class="text-muted mb-0">Click to chat</p>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>

        <div class="chat-window">
            <div class="chat-window-header" id="chat-window-header" style="display: none;">
                <img id="recipient-pic" src="">
                <h5 id="recipient-name" class="mb-0"></h5>
            </div>
            <div id="chat-messages" class="chat-messages flex-grow-1">
                <div class="d-flex align-items-center justify-content-center h-100 text-muted" id="chat-placeholder">
                    <p>Select a conversation to start chatting.</p>
                </div>
            </div>
            <div class="chat-input-area p-3 border-top bg-light">
                <form id="messageForm" style="display: none;">
                    <div class="input-group">
                        <input type="text" id="message-input" class="form-control" placeholder="Type a message..." autocomplete="off">
                        <button type="submit" class="btn btn-primary">Send</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const currentUserId = document.body.dataset.userId;
            const socket = io({ query: { userId: currentUserId } });
            
            const chatMessages = document.getElementById('chat-messages');
            const messageForm = document.getElementById('messageForm');
            const messageInput = document.getElementById('message-input');
            const conversationElements = document.querySelectorAll('.conversation');
            let currentRecipient = null;

            const appendMessage = (msg) => {
                const isSent = msg.sender._id === currentUserId;
                const messageClass = isSent ? 'chat-message-sent' : 'chat-message-received';
                const profilePic = msg.sender.profilePicture || '/images/default-profile.png';
                const timestamp = new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                const messageHTML = `<div class="chat-message ${messageClass}"><img src="${profilePic}" class="chat-profile-pic"><div class="chat-bubble"><div class="username">${msg.sender.firstName}</div><div class="chat-text">${msg.text}</div><div class="timestamp">${timestamp}</div></div></div>`;
                chatMessages.innerHTML += messageHTML;
                chatMessages.scrollTop = chatMessages.scrollHeight;
            };

            const loadMessageHistory = async (recipientId) => {
                try {
                    const response = await fetch(`/api/messages/${recipientId}`);
                    const messages = await response.json();
                    chatMessages.innerHTML = '';
                    messages.forEach(appendMessage);
                } catch (err) {
                    chatMessages.innerHTML = '<p class="text-center text-danger">Could not load messages.</p>';
                }
            };

            conversationElements.forEach(el => {
                el.addEventListener('click', () => {
                    currentRecipient = {
                        id: el.dataset.recipientId,
                        name: el.dataset.recipientName,
                        pic: el.dataset.recipientPic
                    };

                    document.getElementById('recipient-name').textContent = currentRecipient.name;
                    document.getElementById('recipient-pic').src = currentRecipient.pic;
                    document.getElementById('chat-window-header').style.display = 'flex';
                    document.getElementById('messageForm').style.display = 'block';
                    document.getElementById('chat-placeholder').style.display = 'none';

                    conversationElements.forEach(c => c.classList.remove('active'));
                    el.classList.add('active');

                    loadMessageHistory(currentRecipient.id);
                });
            });

            messageForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const text = messageInput.value.trim();
                if (!text || !currentRecipient) return;

                socket.emit('sendDirectMessage', {
                    recipientId: currentRecipient.id,
                    text: text
                });
                messageInput.value = '';
            });

            socket.on('newDirectMessage', (msg) => {
                if (currentRecipient && (msg.sender._id === currentRecipient.id || msg.sender._id === currentUserId)) {
                    appendMessage(msg);
                }
            });
        });
    </script>
</body>
</html>
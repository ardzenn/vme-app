<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Messenger</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="manifest" href="/manifest.json">
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="chat-page-container">
    <div class="conversation-list">
      <div class="conversation-list-header">
        <h4>Chats</h4>
      </div>
      <div id="conversation-list-body">
        <% conversations.forEach(convo => { %>
          <div class="conversation" data-recipient-id="<%= convo._id %>" data-recipient-name="<%= convo.username %>" data-recipient-pic="<%= convo.profilePicture || '/default-profile.png' %>" onclick="selectConversation(this)">
            <img src="<%= convo.profilePicture || '/default-profile.png' %>" alt="<%= convo.username %>">
            <div>
              <strong><%= convo.username %></strong>
              <p class="text-muted mb-0">Click to chat</p>
            </div>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="chat-window">
      <div class="chat-window-header" id="chat-window-header" style="display: none;">
        <img id="recipient-pic" src="" alt="">
        <h5 id="recipient-name" class="mb-0"></h5>
      </div>
      <div class="chat-messages" id="chat-messages">
        <div class="text-center p-5 text-muted" id="chat-placeholder">
          <p>Select a conversation to start chatting.</p>
        </div>
      </div>
      <div class="chat-form p-3 border-top">
        <form id="messageForm" style="display: none;">
          <div class="input-group">
            <input type="text" id="text" class="form-control" placeholder="Type a message..." autocomplete="off">
            <button type="submit" class="btn btn-primary">Send</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const currentUser = <%- JSON.stringify(user) %>;
    
    // Connect to Socket.IO and pass the user's ID for tracking
    const socket = io({ query: { userId: currentUser._id } });

    const chatMessages = document.getElementById('chat-messages');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('text');
    let currentRecipient = null;

    // --- FUNCTIONS ---

    const addMessageToUI = (msg) => {
      const bubble = document.createElement('div');
      bubble.classList.add('chat-bubble');
      const messageType = msg.sender._id === currentUser._id ? 'sent' : 'received';
      bubble.classList.add(messageType);
      
      bubble.innerHTML = `<strong>${msg.sender.username}</strong> ${msg.text}`;
      chatMessages.appendChild(bubble);
      chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll
    };

    const loadMessages = async (recipientId) => {
      const response = await fetch(`/chat/messages/${recipientId}`);
      const messages = await response.json();
      chatMessages.innerHTML = ''; // Clear previous messages
      messages.forEach(addMessageToUI);
    };

    const selectConversation = (element) => {
      // Set recipient info
      const recipientId = element.dataset.recipientId;
      const recipientName = element.dataset.recipientName;
      const recipientPic = element.dataset.recipientPic;
      currentRecipient = { id: recipientId, name: recipientName, pic: recipientPic };

      // Update UI
      document.getElementById('recipient-name').textContent = recipientName;
      document.getElementById('recipient-pic').src = recipientPic;
      document.getElementById('chat-window-header').style.display = 'flex';
      document.getElementById('messageForm').style.display = 'block';
      document.getElementById('chat-placeholder').style.display = 'none';
      
      // Highlight active conversation
      document.querySelectorAll('.conversation').forEach(c => c.classList.remove('active'));
      element.classList.add('active');

      // Load messages
      loadMessages(recipientId);
    };

    // --- EVENT LISTENERS ---

    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const text = messageInput.value.trim();
      if (!text || !currentRecipient) return;

      socket.emit('sendDirectMessage', {
        recipientId: currentRecipient.id,
        text: text
      });
      messageInput.value = '';
    });

    socket.on('newDirectMessage', (msg) => {
      // Only display the message if it's part of the current open conversation
      if (currentRecipient && (msg.sender._id === currentRecipient.id || msg.recipient === currentRecipient.id)) {
        addMessageToUI(msg);
      }
    });

  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Admin Dashboard - VME App</title>
    <%- include('partials/header-meta') %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
     integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" 
     crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <style>
        .is-new td {
            font-weight: bold;
        }
        .new-entry-flash {
            animation: flash-bg 2s ease-out;
        }
        @keyframes flash-bg {
            0% { background-color: #f5c400; }
            100% { background-color: transparent; }
        }
    </style>
</head>
<body data-user-id="<%= currentUser._id %>" data-current-user='<%- JSON.stringify(currentUser) %>'>
    <%- include('partials/splash-screen.ejs') %>
    <%- include('partials/navbar') %>

    <main class="container-fluid" style="padding: 0 2rem;">
        
        <div id="update-notification" class="alert alert-info alert-dismissible fade show m-3" role="alert" style="display: none; cursor: pointer;">
          A new version of the app is available. <strong>Click here to update!</strong>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        <div id="notification-permission-banner" class="alert alert-warning m-3" role="alert" style="display: none;">
        </div>
        
        <header class="page-header">
            <div>
                <h1 style="font-size: 1.875rem;">Admin Dashboard</h1>
                <p style="margin: 0;">System overview and management.</p>
             </div>
              <div class="d-flex align-items-center gap-2">
                <button id="enable-notifications-btn" class="btn btn-outline-primary"><i class="fas fa-bell"></i> Enable Notifications</button>

                <a href="/report/check-ins" class="btn btn-success">Daily Check-in Report</a>
                <a href="/planning/coverage-report" class="btn btn-info">Weekly Check In Report</a>
                <a href="/analytics" class="btn btn-warning">View Analytics</a>
                <a href="/products" class="btn btn-dark">View Product Gallery</a>
              </div>
        </header>

        <% if (locals.success_msg && success_msg.length > 0) { %><div class="alert alert-success"><%= success_msg %></div><% } %>
        <% if (locals.error_msg && error_msg.length > 0) { %><div class="alert alert-danger"><%= error_msg %></div><% } %>

        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4"><div class="card h-100"><div class="card-body"><h5 class="card-title">Total Users</h5><p class="card-text fs-2 fw-bold"><%= stats.totalUsers %></p></div></div></div>
             <div class="col-xl-3 col-md-6 mb-4"><div class="card h-100"><div class="card-body"><h5 class="card-title">Pending Approvals</h5><p class="card-text fs-2 fw-bold"><%= stats.pendingUsers %></p></div></div></div>
            <div class="col-xl-3 col-md-6 mb-4"><div class="card h-100"><div class="card-body"><h5 class="card-title">Check-ins (Today)</h5><p class="card-text fs-2 fw-bold" id="checkins-today-count"><%= stats.checkInsToday %></p></div></div></div>
            <div class="col-xl-3 col-md-6 mb-4"><div class="card h-100"><div class="card-body"><h5 class="card-title">Online Now</h5><p class="card-text fs-2 fw-bold" id="online-users-count">0</p></div></div></div>
        </div>

<!-- Online Users Widget - Add this after the stats cards -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-users text-success"></i> Online Users
                </h5>
                <span class="badge bg-success" id="total-online-count">0</span>
            </div>
            <div class="card-body">
                <div id="online-users-container" class="d-flex flex-wrap gap-2">
                    <!-- Online users will be populated here -->
                </div>
                <div id="no-online-users" class="text-center text-muted py-3" style="display: none;">
                    <i class="fas fa-user-slash fa-2x mb-2"></i>
                    <p>No users are currently online</p>
                </div>
            </div>
        </div>
    </div>
</div>
        <ul class="nav nav-tabs" id="adminTab" role="tablist">
            <li class="nav-item" role="presentation"><button class="nav-link active" data-bs-toggle="tab" data-bs-target="#orders-panel">Sales Orders</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#transactions-panel">Collections</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#checkins-panel">Check-in History</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#daily-plans-panel">Daily Itinerary</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#weekly-itineraries-panel">Weekly Itineraries</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#daily-reports-panel">End of day Report</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#location-log-panel">Location Log</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#map-panel">Live Map</button></li>
            <li class="nav-item" role="presentation"><button class="nav-link" data-bs-toggle="tab" data-bs-target="#users-panel">User Management</button></li>
        </ul>

        <div class="tab-content pt-3" id="adminTabContent">
            <div class="tab-pane fade show active" id="orders-panel" role="tabpanel">
              <div class="card card-tab"><div class="card-body">
                    <input type="text" id="orderSearch" class="form-control mb-3" placeholder="Search orders...">
                     <div class="table-responsive">
                <table class="table table-hover align-middle" id="orderTable">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Reference</th>
                            <th>Customer</th>
                            <th>Order Status</th>
                            <th>Payment Status</th>
                            <th>Products</th>
                            <th>Total Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr data-search="<%= (order.user ? (order.user.firstName || '') + ' ' + (order.user.lastName || '') : '').toLowerCase() %> <%= (order.reference || '').toLowerCase() %> <%= (order.customerName || '').toLowerCase() %>">
                                <td>
                                    <% if (order.user) { %>
                                        <div class="d-flex align-items-center">
                                            <img src="<%= order.user.profilePicture || '/images/default-profile.png' %>" 
                                                 class="rounded-circle me-2" width="32" height="32" style="object-fit: cover;">
                                            <%= order.user.firstName %> <%= order.user.lastName %>
                                        </div>
                                    <% } else { %>
                                        <span class="text-muted">[User Deleted]</span>
                                    <% } %>
                                </td>
                                <td>
                                    <strong><%= order.reference %></strong>
                                    <br><small class="text-muted"><%= new Date(order.createdAt).toLocaleDateString() %></small>
                                </td>
                                <td><%= order.customerName %></td>
                                <td>
                                    <% 
                                    let statusClass = 'secondary';
                                    switch(order.status) {
                                        case 'Pending': statusClass = 'warning'; break;
                                        case 'Processing': statusClass = 'info'; break;
                                        case 'Order Shipped': statusClass = 'primary'; break;
                                        case 'Delivered': statusClass = 'success'; break;
                                        case 'Rejected': statusClass = 'danger'; break;
                                        case 'Cancelled': statusClass = 'dark'; break;
                                        default: statusClass = 'secondary';
                                    }
                                    %>
                                    <span class="badge bg-<%= statusClass %>"><%= order.status || 'Pending' %></span>
                                </td>
                                <td>
                                    <span class="badge bg-<%= order.paymentStatus === 'Paid' ? 'success' : 'warning' %>">
                                        <i class="fas fa-<%= order.paymentStatus === 'Paid' ? 'check-circle' : 'clock' %>"></i>
                                        <%= order.paymentStatus || 'Unpaid' %>
                                    </span>
                                </td>
                                <td>
                                    <% if (order.products && order.products.length > 0) { %>
                                        <div class="product-preview" 
                                             data-bs-toggle="tooltip" 
                                             data-bs-placement="top" 
                                             data-bs-html="true"
                                             title="<% order.products.forEach((product, index) => { %><%= product.product || 'Unknown Product' %> (Qty: <%= product.quantity || 0 %>)<% if (index < order.products.length - 1) { %><br><% } %><% }) %>">
                                            <span class="badge bg-primary me-1">
                                                <%= order.products[0].product || 'Unknown Product' %>
                                            </span>
                                            <% if (order.products.length > 1) { %>
                                                <span class="badge bg-secondary">+<%= order.products.length - 1 %> more</span>
                                            <% } %>
                                        </div>
                                    <% } else { %>
                                        <span class="text-muted">No products</span>
                                    <% } %>
                                </td>
                                <td>
                                    <strong>₱<%= (order.subtotal || 0).toLocaleString('en-US', {minimumFractionDigits: 2}) %></strong>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary view-order-btn" data-order-id="<%= order._id %>">
                                        <i class="fas fa-eye"></i> View
                                    </button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
                </div>
            </div>
            </div>
            <div class="tab-pane fade" id="transactions-panel" role="tabpanel">
                 <div class="card card-tab"><div class="card-body">
                    <input type="text" id="txnSearch" class="form-control mb-3" placeholder="Search transactions...">
                    <div class="table-responsive">
                <table class="table table-hover" id="txnTable">
                    <thead>
                        <tr>
                            <th>Submitted By</th>
                            <th>Type</th>
                            <th>Customer/Hospital</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% transactions.forEach(txn => { %>
                            <tr data-search="<%= (txn.user ? (txn.user.firstName || '').toLowerCase() + ' ' + (txn.user.lastName || '').toLowerCase() : '') %> <%= (txn.customer || txn.hospital || '').toLowerCase() %>">
                                <td>
                                    <% if (txn.user) { %>
                                        <div class="d-flex align-items-center">
                                            <img src="<%= txn.user.profilePicture || '/images/default-profile.png' %>" 
                                                 class="rounded-circle me-2" width="32" height="32" style="object-fit: cover;">
                                            <div>
                                                <%= txn.user.firstName %> <%= txn.user.lastName %>
                                                <br><small class="text-muted"><%= txn.user.role || 'N/A' %></small>
                                            </div>
                                        </div>
                                    <% } else { %>
                                        <span class="text-muted">[User Deleted]</span>
                                    <% } %>
                                </td>
                                <td>
                                    <span class="badge bg-<%= txn.type === 'Collection' ? 'info' : 'success' %>">
                                        <i class="fas fa-<%= txn.type === 'Collection' ? 'hand-holding-usd' : 'university' %>"></i>
                                        <%= txn.type %>
                                    </span>
                                </td>
                                <td>
                                    <strong><%= txn.customer || txn.hospital %></strong>
                                    <% if (txn.reference) { %>
                                        <br><small class="text-muted">Ref: <%= txn.reference %></small>
                                    <% } %>
                                </td>
                                <td>
                                    <strong class="text-<%= txn.type === 'Collection' ? 'success' : 'primary' %>">
                                        ₱<%= (txn.amount || 0).toLocaleString('en-US', {minimumFractionDigits: 2}) %>
                                    </strong>
                                    <% if (txn.paymentMethod) { %>
                                        <br><small class="badge bg-light text-dark"><%= txn.paymentMethod %></small>
                                    <% } %>
                                </td>
                                <td>
                                    <%= new Date(txn.createdAt).toLocaleDateString('en-US', { 
                                        month: 'short', 
                                        day: 'numeric',
                                        year: 'numeric'
                                    }) %>
                                    <br><small class="text-muted"><%= new Date(txn.createdAt).toLocaleTimeString('en-US', { 
                                        hour: '2-digit', 
                                        minute: '2-digit' 
                                    }) %></small>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/transactions/<%= txn._id %>" class="btn btn-sm btn-primary">
                                            <i class="fas fa-eye"></i> View
                                        </a>
                                        <% if (currentUser && (currentUser.role === 'Admin' || currentUser.role === 'Accounting')) { %>
                                          
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
                </div></div>
            </div>
            
            <div class="tab-pane fade" id="checkins-panel" role="tabpanel">
               <div class="card card-tab">
                    <div class="card-body">
                        <input type="text" id="checkinSearch" class="form-control mb-3" placeholder="Search check-ins...">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle" id="checkinTable">
                                <thead><tr><th>Submitted By</th><th>Hospital</th><th>Doctor</th><th>Location</th><th>Activity</th><th>Proof</th><th>Signature</th><th>Date</th></tr></thead>
                                <tbody>
                                    <% if(checkins.length > 0) { %>
                                        <% checkins.forEach(checkin => { %>
                                            <% if (checkin.user) { %>
                                                <tr id="checkin-row-<%= checkin._id %>" data-search="<%= `${checkin.user.firstName} ${checkin.user.lastName}`.toLowerCase() %> <%= (checkin.hospital ? checkin.hospital.name : '').toLowerCase() %> <%= (checkin.doctor ? checkin.doctor.name : '').toLowerCase() %>">
                                                    <td><%= `${checkin.user.firstName} ${checkin.user.lastName}` %></td>
                                                    <td><%= checkin.hospital ? checkin.hospital.name : 'N/A' %></td>
                                                    <td><%= checkin.doctor ? checkin.doctor.name : 'N/A' %></td>
                                                    <td>
                                                        <% if (checkin.mapImageUrl) { %>
                                                            <img src="<%= checkin.mapImageUrl %>" alt="Map" style="width: 150px; border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('<%= checkin.mapImageUrl %>')">
                                                        <% } else { %>
                                                            <span class="text-muted">No Location</span>
                                                        <% } %>
                                                    </td>
                                                    <td><%= checkin.activity || 'N/A' %></td>
                                                    <td>
                                                        <% if (checkin.proof) { %>
                                                            <img src="<%= checkin.proof %>" alt="Proof" width="70" style="border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('<%= checkin.proof %>')">
                                                        <% } else { %><span class="text-muted">No Proof</span><% } %>
                                                    </td>
                                                    <td>
                                                        <% if (checkin.signature) { %>
                                                            <img src="<%= checkin.signature %>" alt="Signature" width="70" style="background-color: #fafafa; border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('<%= checkin.signature %>')">
                                                        <% } else { %><span class="text-muted">No Signature</span><% } %>
                                                    </td>
                                                    <td><%= checkin.createdAtFormatted %></td>
                                                </tr>
                                            <% } else { %>
                                                <tr class="table-warning">
                                                    <td>[User Deleted]</td>
                                                    <td><%= checkin.hospital ? checkin.hospital.name : 'N/A' %></td>
                                                    <td><%= checkin.doctor ? checkin.doctor.name : 'N/A' %></td>
                                                    <td><span class="text-muted">No Location</span></td>
                                                    <td><%= checkin.activity || 'N/A' %></td>
                                                    <td><span class="text-muted">No Proof</span></td>
                                                    <td><span class="text-muted">No Signature</span></td>
                                                    <td><%= checkin.createdAtFormatted %></td>
                                                </tr>
                                            <% } %>
                                        <% }) %>
                                    <% } else { %>
                                         <tr id="no-checkins-row"><td colspan="8" class="text-center p-4">No check-in history found.</td></tr>
                                    <% } %>
                                 </tbody>
                            </table>
                         </div>
                    </div>
                </div>
             </div>
            <div class="tab-pane fade" id="daily-plans-panel" role="tabpanel">
                <div class="card card-tab"><div class="card-body">
                     <input type="text" id="dailyPlanSearch" class="form-control mb-3" placeholder="Search daily plans...">
                    <div class="table-responsive"><table class="table table-hover" id="dailyPlanTable">
                        <thead><tr><th>Submitted By</th><th>Plan Date</th><th>First Client Call</th><th>Actions</th></tr></thead>
                        <tbody>
                             <% dailyPlans.forEach(plan => { %>
                                <% if (plan.user) { %>
                                    <tr class="<%= plan.isNew ? 'is-new' : '' %>" data-plan-id="<%= plan._id %>" data-search="<%= `${plan.user.firstName} ${plan.user.lastName}`.toLowerCase() %> <%= plan.planDateFormatted %>">
                                        <td><%= plan.user.firstName %> <%= plan.user.lastName %></td>
                                        <td><%= plan.planDateFormatted %></td>
                                        <td><%= plan.firstClientCall %></td>
                                        <td><a href="/planning/view/daily/<%= plan._id %>" class="btn btn-sm btn-primary view-details-link">View Details</a></td>
                                    </tr>
                                <% } else { %>
                                    <tr class="table-warning">
                                        <td>[User Deleted]</td>
                                        <td><%= plan.planDateFormatted %></td>
                                        <td><%= plan.firstClientCall %></td>
                                        <td><span class="text-muted">N/A</span></td>
                                    </tr>
                                <% } %>
                            <% }) %>
                        </tbody>
                    </table></div>
                </div></div>
             </div>
            <div class="tab-pane fade" id="weekly-itineraries-panel" role="tabpanel">
                <div class="card card-tab"><div class="card-body">
                    <input type="text" id="weeklyItinerarySearch" class="form-control mb-3" placeholder="Search weekly itineraries...">
                     <div class="table-responsive"><table class="table table-hover" id="weeklyItineraryTable">
                         <thead><tr><th>Submitted By</th><th>Week Start Date</th><th>Actions</th></tr></thead>
                        <tbody>
                             <% weeklyItineraries.forEach(itinerary => { %>
                                <% if (itinerary.user) { %>
                                    <tr data-search="<%= (itinerary.user.firstName || '').toLowerCase() %> <%= (itinerary.user.lastName || '').toLowerCase() %>">
                                        <td><%= itinerary.user.firstName %> <%= itinerary.user.lastName %></td>
                                        <td><%= itinerary.weekStartDateFormatted %></td>
                                        <td><a href="/planning/view/weekly/<%= itinerary._id %>" class="btn btn-sm btn-primary">View Details</a></td>
                                    </tr>
                                <% } else { %>
                                    <tr class="table-warning">
                                        <td>[User Deleted]</td>
                                        <td><%= itinerary.weekStartDateFormatted %></td>
                                        <td><span class="text-muted">N/A</span></td>
                                    </tr>
                                <% } %>
                            <% }) %>
                        </tbody>
                     </table></div>
                </div></div>
            </div>
            
            <div class="tab-pane fade" id="daily-reports-panel" role="tabpanel">
                <div class="card card-tab">
                    <div class="card-body">
                        <input type="text" id="dailyReportSearch" class="form-control mb-3" placeholder="Search reports by user, client, or date...">
                        <div class="table-responsive">
                            <table class="table table-hover" id="dailyReportTable">
                                <thead>
                                    <tr>
                                        <th>Submitted By</th>
                                        <th>Report Date</th>
                                        <th>Last Client Visited</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if(dailyReports.length > 0) { %>
                                        <% dailyReports.forEach(report => { %>
                                            <% if (report.user) { %>
                                                <tr data-search="<%= `${report.user.firstName} ${report.user.lastName}`.toLowerCase() %> <%= new Date(report.reportDate).toLocaleDateString().toLowerCase() %> <%= (report.lastClientVisited || '').toLowerCase() %>">
                                                    <td><%= report.user.firstName %> <%= report.user.lastName %></td>
                                                    <td><%= new Date(report.reportDate).toLocaleDateString() %></td>
                                                    <td><%= report.lastClientVisited || 'N/A' %></td>
                                                    <td><a href="/report/<%= report._id %>" class="btn btn-sm btn-primary">View Details</a></td>
                                                </tr>
                                            <% } %>
                                        <% }) %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="4" class="text-center p-5">No reports have been submitted yet.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="location-log-panel" role="tabpanel">
                <div class="card card-tab">
                    <div class="card-body">
                        <input type="text" id="locationLogSearch" class="form-control mb-3" placeholder="Search by user or location...">
                        <div class="table-responsive">
                            <table class="table table-hover" id="locationLogTable">
                                <thead>
                                    <tr>
                                        <th>User</th>
                                        <th>Last Known Location</th>
                                        <th>Last Update</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% users.forEach(user => { %>
                                        <% if (user.role === 'MSR' || user.role === 'KAS') { %>
                                            <tr id="location-row-<%= user._id %>" data-search="<%= `${user.firstName} ${user.lastName}`.toLowerCase() %> <%= (user.lastKnownAddress || '').toLowerCase() %>">
                                                <td><%= user.firstName %> <%= user.lastName %></td>
                                                <td class="location-address"><%= user.lastKnownAddress || 'N/A' %></td>
                                                <td class="location-update-time"><%= user.lastLocationUpdate ? new Date(user.lastLocationUpdate).toLocaleString() : 'N/A' %></td>
                                            </tr>
                                        <% } %>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

           <div class="tab-pane fade" id="map-panel" role="tabpanel">
    <div class="card card-tab">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="mapUserFilter" class="form-label">Select User</label>
                    <select id="mapUserFilter" class="form-select">
                        <option value="">-- All Users --</option>
                        <% users.forEach(user => { %>
                            <% if (user.role === 'MSR' || user.role === 'KAS') { %>
                                <option value="<%= user._id %>"><%= user.firstName %> <%= user.lastName %></option>
                            <% } %>
                        <% }) %>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="mapDateFilter" class="form-label">Select Date</label>
                    <input type="date" id="mapDateFilter" class="form-control">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button id="loadTracksBtn" class="btn btn-primary w-100">Load Historical Track</button>
                </div>
            </div>
            <div id="map" style="height: 60vh; width: 100%;"></div>
        </div>
    </div>
</div>

<div class="tab-pane fade" id="users-panel" role="tabpanel">
    <div class="card card-tab">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">User Management</h5>
                <% if (currentUser && currentUser.role === 'Admin') { %>
                <% } %>
            </div>
            
            <input type="text" id="userSearch" class="form-control mb-3" placeholder="Search users by name or email...">
            
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="userTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Joined</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% users.forEach(user => { %>
                            <tr data-search="<%= `${user.firstName} ${user.lastName} ${user.username}`.toLowerCase() %>" data-user-id="<%= user._id %>">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src="<%= user.profilePicture || '/images/default-profile.png' %>" 
                                             class="rounded-circle me-2" width="40" height="40" 
                                             style="object-fit: cover;">
                                        <div>
                                            <div class="fw-medium"><%= user.firstName %> <%= user.lastName %></div>
                                        </div>
                                    </div>
                                </td>
                                <td><%= user.username %></td>
                                <td>
                                    <% if (user.role === 'Pending') { %>
                                        <span class="badge bg-warning">Pending Approval</span>
                                    <% } else { %>
                                        <span class="badge bg-<%= user.role === 'Admin' ? 'danger' : user.role === 'IT' ? 'info' : user.role === 'Accounting' ? 'success' : 'primary' %>">
                                            <%= user.role %>
                                        </span>
                                    <% } %>
                                </td>
                                <td>
                                    <% if (user.role === 'Pending') { %>
                                        <span class="text-warning"><i class="fas fa-clock"></i> Awaiting Approval</span>
                                    <% } else { %>
                                        <span class="text-success"><i class="fas fa-check-circle"></i> Active</span>
                                    <% } %>
                                </td>
                                <td><%= new Date(user.createdAt).toLocaleDateString() %></td>
                                <td>
                                    <% if (currentUser && currentUser.role === 'Admin') { %>
                                        <% if (user.role === 'Pending') { %>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-success approve-user-btn" 
                                                        data-user-id="<%= user._id %>" 
                                                        data-user-name="<%= user.firstName %> <%= user.lastName %>">
                                                    <i class="fas fa-check"></i> Approve
                                                </button>
                                                <button class="btn btn-sm btn-danger reject-user-btn" 
                                                        data-user-id="<%= user._id %>" 
                                                        data-user-name="<%= user.firstName %> <%= user.lastName %>">
                                                    <i class="fas fa-times"></i> Reject
                                                </button>
                                            </div>
                                        <% } else if (user._id.toString() !== currentUser._id.toString()) { %>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary edit-user-btn" 
                                                        data-user-id="<%= user._id %>">
                                                    <i class="fas fa-edit"></i> Edit Role
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger delete-user-btn" 
                                                        data-user-id="<%= user._id %>" 
                                                        data-user-name="<%= user.firstName %> <%= user.lastName %>">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        <% } else { %>
                                            <span class="text-muted small">Current User</span>
                                        <% } %>
                                    <% } else { %>
                                        <span class="text-muted small">No Actions</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- User Approval Modal -->
<div class="modal fade" id="userApprovalModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Approve User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="userApprovalForm">
                <div class="modal-body">
                    <p>Select a role for <strong id="approvalUserName"></strong>:</p>
                    <input type="hidden" id="approvalUserId">
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" id="userRole" required>
                            <option value="">-- Select Role --</option>
                            <option value="MSR">MSR (Medical Sales Representative)</option>
                            <option value="KAS">KAS (Key Account Specialist)</option>
                            <option value="Sales Manager">Sales Manager</option>
                            <option value="Accounting">Accounting</option>
                            <option value="Inventory">Inventory</option>
                            <option value="IT">IT</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Approve User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Role Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User Role</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editUserForm">
                <div class="modal-body">
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" id="editUserRole" required>
                            <option value="MSR">MSR (Medical Sales Representative)</option>
                            <option value="KAS">KAS (Key Account Specialist)</option>
                            <option value="Sales Manager">Sales Manager</option>
                            <option value="Accounting">Accounting</option>
                            <option value="Inventory">Inventory</option>
                            <option value="IT">IT</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Role</button>
                </div>
            </form>
        </div>
    </div>
</div>


    <%- include('partials/order-detail-modal') %>
    <%- include('partials/image-zoom-modal') %>

    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/js/dashboard-main.js"></script>
    <script src="/js/push-client.js"></script>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
        const socket = io({
            query: { userId: '<%= currentUser._id %>' }
        });
        
        const onlineUsersContainer = document.getElementById('online-users-container');
        const noOnlineUsersDiv = document.getElementById('no-online-users');
        const totalOnlineCountBadge = document.getElementById('total-online-count');
        const onlineUsersCountCard = document.getElementById('online-users-count');


   function updateOnlineUsersDisplay(users) {
            if (!onlineUsersContainer) return;

            const onlineCount = users.length;

            // Update both counters
            if (totalOnlineCountBadge) totalOnlineCountBadge.textContent = onlineCount;
            if (onlineUsersCountCard) onlineUsersCountCard.textContent = onlineCount;

            // Show or hide the "No users online" message
            if (onlineCount === 0) {
                onlineUsersContainer.innerHTML = '';
                onlineUsersContainer.style.display = 'none';
                if (noOnlineUsersDiv) noOnlineUsersDiv.style.display = 'block';
                return;
            }
            
            onlineUsersContainer.style.display = 'flex';
            if (noOnlineUsersDiv) noOnlineUsersDiv.style.display = 'none';

            // Build the user cards
            onlineUsersContainer.innerHTML = '';
            users.forEach(user => {
                const userElement = document.createElement('div');
                userElement.className = 'online-user-item';
                userElement.innerHTML = `
                    <div class="d-flex align-items-center bg-light rounded p-2 border">
                        <div class="position-relative">
                            <img src="${user.profilePicture || '/images/default-profile.png'}"
                                 class="rounded-circle me-2" width="40" height="40"
                                 style="object-fit: cover;" alt="${user.firstName} ${user.lastName}">
                           
                        </div>
                        <div>
                            <div class="fw-medium">${user.firstName} ${user.lastName}</div>
                            <small class="text-muted">${user.role}</small>
                            ${user.lastKnownAddress ? `<br><small class="text-muted" title="${user.lastKnownAddress}"><i class="fas fa-map-marker-alt fa-xs"></i> ${user.lastKnownAddress.substring(0, 25)}${user.lastKnownAddress.length > 25 ? '...' : ''}</small>` : ''}
                        </div>
                    </div>
                `;
                onlineUsersContainer.appendChild(userElement);
            });
        }
        
        // --- WebSocket Event Listeners ---
        socket.on('connect', () => {
            console.log('Successfully connected to WebSocket server.');
            socket.emit('requestUserList'); // Request the list as soon as we connect
        });

        // This is the single, authoritative handler for the user list
        socket.on('updateUserList', (onlineUsers) => {
            updateOnlineUsersDisplay(onlineUsers);
            // If you have map logic that also needs this list, call it here too.
            // For example: updateUserMap(onlineUsers);
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from WebSocket server.');
        });

});
</script>
    <script>  
    

    // product hover
    document.addEventListener('DOMContentLoaded', function() {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
    
    
    // User Management
        document.addEventListener('DOMContentLoaded', function() {
    // Search functionality
    const userSearch = document.getElementById('userSearch');
    if (userSearch) {
        userSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            document.querySelectorAll('#userTable tbody tr').forEach(row => {
                row.style.display = (row.dataset.search || '').includes(searchTerm) ? '' : 'none';
            });
        });
    }

    // User approval
    const userApprovalModal = new bootstrap.Modal(document.getElementById('userApprovalModal'));
    const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));

    // Approve user buttons
    document.querySelectorAll('.approve-user-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const userId = this.dataset.userId;
            const userName = this.dataset.userName;
            document.getElementById('approvalUserId').value = userId;
            document.getElementById('approvalUserName').textContent = userName;
            userApprovalModal.show();
        });
    });

    // Edit user buttons
    document.querySelectorAll('.edit-user-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const userId = this.dataset.userId;
            document.getElementById('editUserId').value = userId;
            editUserModal.show();
        });
    });

    // Reject user buttons
    document.querySelectorAll('.reject-user-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const userId = this.dataset.userId;
            const userName = this.dataset.userName;
            if (confirm(`Are you sure you want to reject ${userName}'s account?`)) {
                fetch(`/admin/users/${userId}/reject`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error rejecting user');
                    }
                });
            }
        });
    });

    // Delete user buttons
    document.querySelectorAll('.delete-user-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const userId = this.dataset.userId;
            const userName = this.dataset.userName;
            if (confirm(`Are you sure you want to delete ${userName}'s account? This action cannot be undone.`)) {
                fetch(`/admin/users/${userId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting user');
                    }
                });
            }
        });
    });

    // User approval form
    document.getElementById('userApprovalForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const userId = document.getElementById('approvalUserId').value;
        const role = document.getElementById('userRole').value;
        
        fetch(`/admin/users/${userId}/approve`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ role })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                userApprovalModal.hide();
                location.reload();
            } else {
                alert('Error approving user');
            }
        });
    });

    // Edit user form
    document.getElementById('editUserForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const userId = document.getElementById('editUserId').value;
        const role = document.getElementById('editUserRole').value;
        
        fetch(`/admin/users/${userId}/role`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ role })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                editUserModal.hide();
                location.reload();
            } else {
                alert('Error updating user role');
            }
        });
    });
});

</script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const activateTabFromHash = () => {
                const hash = window.location.hash;
                if (hash) {
                    const tabTrigger = document.querySelector(`button[data-bs-toggle="tab"][data-bs-target="${hash}"]`);
                    if (tabTrigger) {
                        const tab = new bootstrap.Tab(tabTrigger);
                        tab.show();
                    }
                }
            };
            activateTabFromHash();
            window.addEventListener('hashchange', activateTabFromHash);

            const imageZoomModal = new bootstrap.Modal(document.getElementById('imageZoomModal'));
            const modalZoomImage = document.getElementById('modalZoomImage');
            window.showImageInModal = function(src) {
                if (modalZoomImage) {
                    modalZoomImage.src = src;
                    imageZoomModal.show();
                }
            }

                  // --- FIXED SEARCH BAR LOGIC ---
            const setupSearch = (inputId, tableId) => {
                const searchInput = document.getElementById(inputId);
                if (!searchInput) return;
                const tableRows = document.querySelectorAll(`#${tableId} tbody tr`);
                searchInput.addEventListener('keyup', () => {
                    const filter = searchInput.value.toLowerCase().trim();
                    tableRows.forEach(row => {
                        const searchData = row.dataset.search || '';
                        // This now checks if all words in the filter appear in the search data
                        const isMatch = filter.split(' ').every(word => searchData.includes(word));
                        row.style.display = isMatch ? '' : 'none';
                    });
                });
            };
            setupSearch('userSearch', 'userTable');
            setupSearch('orderSearch', 'orderTable');
            setupSearch('txnSearch', 'txnTable');
            setupSearch('checkinSearch', 'checkinTable');
            setupSearch('dailyPlanSearch', 'dailyPlanTable');
            setupSearch('weeklyItinerarySearch', 'weeklyItineraryTable');
            setupSearch('dailyReportSearch', 'dailyReportTable');
            setupSearch('locationLogSearch', 'locationLogTable');
            
            const socket = io();
            const onlineUsersCountEl = document.getElementById('online-users-count');
            const userMarkers = {};
            let map;

            const mapTabButton = document.querySelector('button[data-bs-target="#map-panel"]');
            if (mapTabButton) {
                mapTabButton.addEventListener('shown.bs.tab', event => {
                    if (!map) {
                        map = L.map('map').setView([12.8797, 121.7740], 6);
                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
                    }
                    setTimeout(() => map.invalidateSize(), 10); 
                });
            }
            
            const updateUserListAndMap = (users) => {
                if(onlineUsersCountEl) onlineUsersCountEl.textContent = users.length;
                const onlineUserIds = new Set(users.map(u => u._id));
                for (const userId in userMarkers) {
                    if (!onlineUserIds.has(userId)) {
                        userMarkers[userId].remove();
                        delete userMarkers[userId];
                    }
                }

                users.forEach(user => {
                    if (user.lastLocation && user.lastLocation.coordinates.length === 2) {
                        const [lng, lat] = user.lastLocation.coordinates;
                        const address = user.lastKnownAddress || 'Getting address...';
                        if (map && lat !== 0 && lng !== 0) {
                            const popupContent = `<b>${user.firstName} ${user.lastName}</b><br>${address}`;
                            if (userMarkers[user._id]) {
                                userMarkers[user._id].setLatLng([lat, lng]).setPopupContent(popupContent);
                            } else {
                                userMarkers[user._id] = L.marker([lat, lng]).addTo(map).bindPopup(popupContent);
                            }
                        }
                    }
                });
            };

            socket.on('updateUserList', (onlineUsers) => {
                updateUserListAndMap(onlineUsers);
            });
            
            socket.on('locationUpdate', (user) => {
                if (!user) return;
                
                const [lng, lat] = user.lastLocation.coordinates;
                const address = user.lastKnownAddress || 'Address not available';
                const updateTime = new Date(user.lastLocationUpdate).toLocaleString();

                if (map && lat !== 0 && lng !== 0) {
                    const popupContent = `<b>${user.firstName} ${user.lastName}</b><br>${address}`;
                    if (userMarkers[user._id]) {
                        userMarkers[user._id].setLatLng([lat, lng]).setPopupContent(popupContent);
                    } else {
                        userMarkers[user._id] = L.marker([lat, lng]).addTo(map).bindPopup(popupContent);
                    }
                }

                const logRow = document.getElementById(`location-row-${user._id}`);
                if (logRow) {
                    const addressCell = logRow.querySelector('.location-address');
                    const timeCell = logRow.querySelector('.location-update-time');
                    if (addressCell) addressCell.textContent = address;
                    if (timeCell) timeCell.textContent = updateTime;
                    logRow.classList.add('new-entry-flash');
                    setTimeout(() => logRow.classList.remove('new-entry-flash'), 2000);
                }
            });

            socket.on('newCheckIn', (checkin) => {
                const tableBody = document.querySelector('#checkinTable tbody');
                if (!tableBody) return;

                const checkinsTodayCountEl = document.getElementById('checkins-today-count');
                if (checkinsTodayCountEl) {
                    checkinsTodayCountEl.textContent = parseInt(checkinsTodayCountEl.textContent, 10) + 1;
                }

                const noCheckinsRow = document.getElementById('no-checkins-row');
                if (noCheckinsRow) {
                    noCheckinsRow.remove();
                }

                const newRow = document.createElement('tr');
                newRow.id = `checkin-row-${checkin._id}`;
                newRow.classList.add('new-entry-flash');

                const userName = checkin.user ? `${checkin.user.firstName} ${checkin.user.lastName}` : 'N/A';
                const hospitalName = checkin.hospital ? checkin.hospital.name : 'N/A';
                const doctorName = checkin.doctor ? checkin.doctor.name : 'N/A';
                
                newRow.dataset.search = `${userName.toLowerCase()} ${hospitalName.toLowerCase()} ${doctorName.toLowerCase()}`;
                
                newRow.innerHTML = `
                    <td>${userName}</td>
                    <td>${hospitalName}</td>
                    <td>${doctorName}</td>
                    <td><span class="text-muted">No Location Yet</span></td>
                    <td>${checkin.activity || 'N/A'}</td>
                    <td>${checkin.proof ? `<img src="${checkin.proof}" alt="Proof" width="70" style="border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('${checkin.proof}')">` : '<span class="text-muted">No Proof</span>'}</td>
                    <td>${checkin.signature ? `<img src="${checkin.signature}" alt="Signature" width="70" style="background-color: #fafafa; border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('${checkin.signature}')">` : '<span class="text-muted">No Signature</span>'}</td>
                    <td>${new Date(checkin.createdAt).toLocaleString()}</td>
                `;
                
                tableBody.prepend(newRow);
            });
            
            socket.on('checkInLocationUpdated', (data) => {
                const row = document.getElementById(`checkin-row-${data.checkInId}`);
                if (!row) return;

                const locationCell = row.cells[3];
                if(locationCell) {
                    locationCell.innerHTML = `<img src="${data.mapImageUrl}" alt="Map" style="width: 150px; border-radius: 0.25rem; cursor: pointer;" onclick="showImageInModal('${data.mapImageUrl}')">`;
                }
            });

            const userTable = document.getElementById('userTable');
            if(userTable) {
                userTable.addEventListener('click', (e) => {
                    const target = e.target;
                    const row = target.closest('tr');
                    if (!row) return;

                    const roleDisplay = row.querySelector('.role-display');
                    const roleEditForm = row.querySelector('.role-edit-form');
                    const editButton = row.querySelector('.edit-role-btn');

                    if (target.classList.contains('edit-role-btn')) {
                        roleDisplay.style.display = 'none';
                        editButton.style.display = 'none';
                        roleEditForm.style.display = 'flex';
                    }

                    if (target.classList.contains('cancel-role-edit')) {
                        roleDisplay.style.display = 'inline-block';
                        editButton.style.display = 'inline-block';
                        roleEditForm.style.display = 'none';
                    }
                });
            }
        });


      let map = null;
const userMarkers = {};
let isMapInitialized = false;

// Function to initialize the map
function initializeMap() {
    if (isMapInitialized) return;
    
    const mapContainer = document.getElementById('map');
    if (!mapContainer) return;
    
    // Initialize map centered on Philippines
    map = L.map('map').setView([12.8797, 121.7740], 6);
    
    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);
    
    isMapInitialized = true;
    
    // Load all current user positions
    loadCurrentPositions();
}

// Function to load current positions of all users
async function loadCurrentPositions() {
    try {
        const response = await fetch('/api/users');
        const users = await response.json();
        
        users.forEach(user => {
            if ((user.role === 'MSR' || user.role === 'KAS') && user.lastLocation && user.lastLocation.coordinates) {
                updateUserMarker(user);
            }
        });
    } catch (error) {
        console.error('Failed to load user positions:', error);
    }
}

// Function to update or create a user marker
function updateUserMarker(user) {
    if (!map || !user.lastLocation || !user.lastLocation.coordinates) return;
    
    const [lng, lat] = user.lastLocation.coordinates;
    if (lat === 0 && lng === 0) return; // Skip invalid coordinates
    
    const markerId = user._id;
    const markerIcon = L.divIcon({
        html: `<div style="background-color: ${user.role === 'MSR' ? '#007bff' : '#28a745'}; 
                width: 30px; height: 30px; border-radius: 50%; 
                display: flex; align-items: center; justify-content: center; 
                color: white; font-weight: bold; border: 2px solid white;">
                ${user.firstName.charAt(0)}
               </div>`,
        iconSize: [30, 30],
        className: 'custom-user-marker'
    });
    
    const popupContent = `
        <div>
            <strong>${user.firstName} ${user.lastName}</strong><br>
            <small>${user.role}</small><br>
            <em>${user.lastKnownAddress || 'Getting address...'}</em><br>
            <small>Updated: ${user.lastLocationUpdate ? new Date(user.lastLocationUpdate).toLocaleString() : 'N/A'}</small>
        </div>
    `;
    
    if (userMarkers[markerId]) {
        // Update existing marker
        userMarkers[markerId].setLatLng([lat, lng]);
        userMarkers[markerId].setPopupContent(popupContent);
    } else {
        // Create new marker
        userMarkers[markerId] = L.marker([lat, lng], { icon: markerIcon })
            .addTo(map)
            .bindPopup(popupContent);
    }
}

// Listen for map tab activation
document.addEventListener('DOMContentLoaded', () => {
    const mapTabButton = document.querySelector('button[data-bs-target="#map-panel"]');
    if (mapTabButton) {
        mapTabButton.addEventListener('shown.bs.tab', () => {
            if (!isMapInitialized) {
                initializeMap();
            } else {
                // Refresh map size
                setTimeout(() => {
                    if (map) map.invalidateSize();
                }, 100);
            }
        });
    }
    
    // Socket event listeners
    const socket = io();
    
    socket.on('locationUpdate', (user) => {
        console.log('Location update received:', user);
        
        // Update marker on map if map is initialized
        if (map && user) {
            updateUserMarker(user);
        }
        
        // Update location log table
        const logRow = document.getElementById(`location-row-${user._id}`);
        if (logRow) {
            const addressCell = logRow.querySelector('.location-address');
            const timeCell = logRow.querySelector('.location-update-time');
            if (addressCell) addressCell.textContent = user.lastKnownAddress || 'N/A';
            if (timeCell) timeCell.textContent = new Date(user.lastLocationUpdate).toLocaleString();
            
            // Add flash animation
            logRow.classList.add('new-entry-flash');
            setTimeout(() => logRow.classList.remove('new-entry-flash'), 2000);
        }
    });
    
    socket.on('userDisconnected', (userId) => {
        // Optionally change marker appearance for offline users
        if (userMarkers[userId]) {
            userMarkers[userId].setOpacity(0.5);
        }
    });
    
    socket.on('updateUserList', (onlineUsers) => {
        // Update online users count
        const onlineUsersCountEl = document.getElementById('online-users-count');
        if (onlineUsersCountEl) {
            onlineUsersCountEl.textContent = onlineUsers.length;
        }
        
        // Update markers for online users
        if (map) {
            onlineUsers.forEach(user => {
                if ((user.role === 'MSR' || user.role === 'KAS') && user.lastLocation) {
                    updateUserMarker(user);
                    if (userMarkers[user._id]) {
                        userMarkers[user._id].setOpacity(1);
                    }
                }
            });
        }
    });
});
function debugLocationSystem() {
    console.log('=== Location System Debug ===');
    
    // Check if map is initialized
    console.log('Map initialized:', !!map);
    console.log('User markers:', Object.keys(userMarkers).length);
    
    // Check WebSocket connection
    if (typeof socket !== 'undefined') {
        console.log('Socket connected:', socket.connected);
    }
    
    // Test location API
    fetch('/api/users-with-locations')
        .then(res => res.json())
        .then(users => {
            console.log('Users with locations:', users.length);
            users.forEach(user => {
                console.log(`${user.firstName} ${user.lastName}:`, user.lastLocation);
            });
        });
    
    // Check browser location permission
    navigator.permissions.query({ name: 'geolocation' })
        .then(result => {
            console.log('Geolocation permission:', result.state);
        });
}

// Run debug
debugLocationSystem();
    </script>
      <script>
    document.addEventListener('DOMContentLoaded', () => {
        const notificationButton = document.getElementById('enable-notifications-btn');

        // Check if notifications are supported and permission is not yet granted or denied
        if ('Notification' in window && notificationButton) {
            if (Notification.permission === 'granted' || Notification.permission === 'denied') {
                // If permission is already granted or denied, hide the button
                notificationButton.style.display = 'none';
            }

            notificationButton.addEventListener('click', () => {
                Notification.requestPermission().then(permission => {
                    if (permission === 'granted') {
                        alert('Notifications have been enabled!');
                        notificationButton.style.display = 'none';
                        // You might want to initialize your push subscription here
                        // by calling a function from your push-client.js
                    } else if (permission === 'denied') {
                        alert('You have blocked notifications. You can enable them in your browser settings.');
                        notificationButton.style.display = 'none';
                    }
                });
            });
        } else if (notificationButton) {
            // Hide button if notifications are not supported by the browser
            notificationButton.style.display = 'none';
        }
    });
    </script>
    <%- include('partials/chat-widget.ejs') %>
    <script src="/js/chat-widget.js"></script>
    <script src="/js/notifications.js"></script>
    <script src="/js/app-init.js"></script>
</body>
</html>